using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;


namespace PlazaConnectivityChecker.Models
{

    public class PortTestResults : ObservableCollection<PortTestResult>, INotifyPropertyChanged
    {

        //public static ObservableCollection<PortTestResult> _PortTestResultCollection = new ObservableCollection<PortTestResult>();
        //public static ObservableCollection<PortTestResult> PortTestResultCollection { get { return _PortTestResultCollection; } }


        //public event PropertyChangedEventHandler PropertyChanged;

        protected override event PropertyChangedEventHandler PropertyChanged;


        // This method is called by the Set accessor of each property.
        // The CallerMemberName attribute that is applied to the optional propertyName
        // parameter causes the property name of the caller to be substituted as an argument.
        private void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            if (propertyName != null)
            {

                PropertyChanged?.Invoke(this,
                    new PropertyChangedEventArgs(propertyName));
            }
        }


        public PortTestResults() : base()
        {

            

            Add(new PortTestResult
            (
               "Windows Server",
                "Server",
                "TCP",
                "NTP",
                "NTP stands for Network Time Protocol, and it is an Internet protocol used " +
                    "to synchronize the clocks of computers to some time reference",
                80,
                false,
                false,
                "/Logos/Logo-WinServer.png"

            ));

            Add(new PortTestResult
           (
               "Windows Server",
               "Server",
               "TCP",
                "Windows File & Print Services",
                "NetBIOS session service (NBSS) is a method to connect two computers for transmitting large messages or heavy data traffic. " +
                "Because the NetBIOS session service is involved in traffic generation and forwarding, TCP port 139 is used.",
                 139,
                false,
                false,
               "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Windows File & Print Services",
                 "The Server Message Block Protocol(SMB protocol) is a client - server communication protocol used for sharing access to files, printers, serial ports and other resources on a network.It can also carry transaction protocols for interprocess communication.",
                 445,
                 false,
                false,
                "/Logos/Logo-WinServer.png"

            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "LDAP & LDAP SSL",
                 "The Lightweight Directory Access Protocol (LDAP) is used to read from and write to Active Directory. " +
                "By default, LDAP traffic is transmitted unsecured. You can make LDAP traffic confidential and secure by using " +
                "Secure Sockets Layer (SSL) / Transport Layer Security (TLS) technology",
                 389,
                false,
                false,
                "/Logos/Logo-WinServer.png"

            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "LDAP & LDAP SSL",
                 "The Lightweight Directory Access Protocol (LDAP) is used to read from and write to Active Directory. " +
                "By default, LDAP traffic is transmitted unsecured. You can make LDAP traffic confidential and secure by using " +
                "Secure Sockets Layer (SSL) / Transport Layer Security (TLS) technology",
                 636,
                 false,
                false,
                "/Logos/Logo-WinServer.png"
            ));


            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft Message Queuing",
                 "Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous " +
                "networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. " +
                "The following illustration shows how a queue can hold messages that are generated by multiple sending applications and read by multiple receiving applications.",
                 135,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft Message Queuing",
                 "Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous " +
             "networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. " +
             "The following illustration shows how a queue can hold messages that are generated by multiple sending applications and read by multiple receiving applications.",
                 1801,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft Message Queuing",
                 "Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous " +
             "networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. " +
             "The following illustration shows how a queue can hold messages that are generated by multiple sending applications and read by multiple receiving applications.",
                 2101,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft Message Queuing",
                 "Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous " +
             "networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. " +
             "The following illustration shows how a queue can hold messages that are generated by multiple sending applications and read by multiple receiving applications.",
                 2103,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft Message Queuing",
                 "Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous " +
             "networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. " +
             "The following illustration shows how a queue can hold messages that are generated by multiple sending applications and read by multiple receiving applications.",
                 3527,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft SQL Server",
                 "Microsoft SQL Server is a relational database management system, or RDBMS, that supports a wide variety of transaction processing, " +
                "business intelligence and analytics applications in corporate IT environments",
                 1433,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft SQL Server in case of foreign database deployment",
                 "Port 1434 is used by the SQL Browser Service which allows connections to named instances of SQL Server that use dynamic ports with out having " +
                "to know what port each named instance is using, especially since PortTestResultCollection can change between restarts of the named instance.",
                 1434,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));

            Add(new PortTestResult
            (
                 "Windows Server",
                 "Server",
                 "TCP",
                 "Microsoft SQL Server in case of foreign database deployment",
                 "Port 1434 is used by the SQL Browser Service which allows connections to named instances of SQL Server that use dynamic ports with out having " +
             "to know what port each named instance is using, especially since PortTestResultCollection can change between restarts of the named instance.",
                 1901,
                false,
                false,
                "/Logos/Logo-WinServer.png"
            ));


            Add(new PortTestResult
            (
                 "Plaza",
                 "Server",
                 "TCP",
                 "TP Server",
                 "Image transfer from the syngo.plaza server to the client",
                 1024,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza",
                 "Server",
                 "TCP",
                 "ZeroMQ",
                 "ZeroMQ is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications. " +
                "It provides a message queue, but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker.",
                 1006,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza",
                 "Server",
                 "TCP",
                 "ZeroMQ",
                 "ZeroMQ is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications. " +
         "It provides a message queue, but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker.",
                 1007,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza Server",
                 "Server",
                 "TCP",
                 "Managed Node Package: Siemens Remote Service",
                 "Siemens Remote Service.",
                 8226,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza Server",
                 "Server",
                 "TCP",
                 "Managed Node Package: Siemens Remote Service",
                 "Siemens Remote Service.",
                 13001,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza",
                 "Server",
                 "TCP",
                 "OPENLink",
                 "Communication from syngo.plaza to RIS systems.",
                 9001,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza",
                 "Server",
                 "TCP",
                 "FLEXlm",
                 "FLEXlm license manager daemon.",
                 27000,
                false,
                false,
                "/Logos/Logo-Plaza.png"
            ));

            Add(new PortTestResult
            (
                 "Plaza",
                 "Client",
                 "TCP",
                 "FLEXlm",
                 "FLEXlm license manager daemon.",
                 27001,
                false,
                false,
                "/Logos/Logo-Plaza.png"

            ));
        }
    }





    public class PortTestResult : INotifyPropertyChanged
    {
        public PortTestResult(string owner, string serverclient, string protocol, string portrole, string description, int portnumber, bool portavailable, bool loaded, string logo)
        {
            

            this.Owner = owner;
            this.ServerClient = serverclient;
            this.Protocol = protocol;
            this.PortRole = portrole;
            this.Description = description;
            this.PortNumber = portnumber;
            this.PortAvailable = portavailable;
            this.Loaded = loaded;
            this.Logo = logo;

        }



        public string Owner
        {
            get
            {
                return this.owner;
            }
            set
            {
                if (value != this.owner)
                {
                    this.owner = value;
                    NotifyPropertyChanged(nameof(Owner));
                }
            }
        }

        public string ServerClient
        {
            get
            {
                return this.serverClient;
            }
            set
            {
                if (value != this.serverClient)
                {
                    this.serverClient = value;
                    NotifyPropertyChanged(nameof(ServerClient));
                }
            }
        }

        public string Protocol
        {
            get
            {
                return this.protocol;
            }
            set
            {
                if (value != this.protocol)
                {
                    this.protocol = value;
                    NotifyPropertyChanged(nameof(Protocol));
                }
            }
        }

        public string PortRole
        {
            get
            {
                return this.portRole;
            }
            set
            {
                if (value != this.portRole)
                {
                    this.portRole = value;
                    NotifyPropertyChanged(nameof(PortRole));
                }
            }
        }

        public string Description
        {
            get
            {
                return this.description;
            }
            set
            {
                if (value != this.description)
                {
                    this.description = value;
                    NotifyPropertyChanged("Description");
                }
            }
        }

        public int PortNumber { get; set; }

        public bool PortAvailable
        {
            get
            {
                return this.portAvailable;
            }
            set
            {
                if (value != this.portAvailable)
                {
                    this.portAvailable = value;
                    NotifyPropertyChanged(nameof(PortAvailable));
                }
            }
        }


        public bool Loaded
        {
            get
            {
                return this.loaded;
            }
            set
            {
                if (value != this.loaded)
                {
                    this.loaded = value;
                    NotifyPropertyChanged(nameof(Loaded));
                }
            }
        }

        public string Logo
        {
            get
            {
                return this.logo;
            }
            set
            {
                if (value != this.logo)
                {
                    this.logo = value;
                    NotifyPropertyChanged(nameof(Logo));
                }
            }
        }






        private string owner { get; set; }
        private string serverClient { get; set; }
        private string protocol { get; set; }
        private string portRole { get; set; }
        private string description { get; set; }
        private int portnumber { get; set; }
        private bool portAvailable { get; set; }
        private string logo { get; set; }
        private bool loaded { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;


        // This method is called by the Set accessor of each property.
        // The CallerMemberName attribute that is applied to the optional propertyName
        // parameter causes the property name of the caller to be substituted as an argument.
        public void NotifyPropertyChanged([CallerMemberName] string propertyName = "")
        {
            if (propertyName != null)
            {

                PropertyChanged?.Invoke(this,
                    new PropertyChangedEventArgs(propertyName));
            }
        }



    }












}




  
